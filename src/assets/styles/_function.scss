$string: 'Hello Sass';
//1.字符串函数
.test {
  content: unquote($string);
}
.test1 {
  content: quote($string);
}
.test2 {
  content: to_lower_case($string)
}
.test3 {
  content: to_upper_case($string)
}
//2.数字函数
.num {
  /*转换成百分比值*/
  width: percentage(.2);
  height: percentage(2px / 10px);
  margin: percentage(2em / 10em);
}
.num1 {
  /*四舍五入，两边单位不统一会报错*/
  width: round(12.3px);
  height: round(2px / 3px);
  margin: round(2.2%);
}
.num2 {
  /*向上取整*/
  width: ceil(2.3px);
  height: ceil(2px / 3px);
  margin: ceil(2.8%);
}
.num3 {
  /*向下取整*/
  width: floor(2.3px);
  height: floor(2px / 3px);
  margin: floor(2.8%);
}
.num4 {
  width: abs(2.3px);
  height: min(1,2,1%,3,300%);
  margin: max(1px,5px);
  padding: random();
}
//3.列表函数
.list {
  width: length(10px);//返回列表清单中有多少个值，空格隔开，不能使用逗号。
  height: length(border 1px solid);//同一个列表里,可以是不同类型、不同单位的值
}
.list1 {
  width: nth((Helvetica,Arial,sans-serif),2);//指定列表中某个位置的值，1是指列表中的第一个标签值,以此类推。
  height: nth((1px solid red) border-top green,1);
}
.list2 {
  margin: join((10px 20px),(30px 40px));//将两个列表连接合并成一个列表,不同列表之间用逗号隔开。
  padding: append((10px,20px,20px),30px); //将某个值插入到列表中，并且处于最末位
  border: zip(1px 2px 3px,solid dashed dotted);//多个列表值转成一个多维的列表,每个单一的列表个数值必须是相同
}
.list3 {
  width: index(1px solid red, 1px);   //返回对应的值在列表中所处的位置,第一个值就是1,以此类推。
  height:  index(1px solid red, yellow)  //如果指定的值不在列表中，那么返回的值将是false著作权归作者所有。
}
//4.Introspection函数
.demo1 {
  content:type-of(100);  //判断一个值是属于什么类型
  content:type-of(100px);
  content:type-of(asdf);
  content: type-of(blue);
}
.demo2 {
  content: unit(10px * 3em);  //获取一个值所使用的单位
  content: unit(10px * 2em / 3cm / 1rem);
}
.demo3 {
  content: unitless(100px);  //判断一个值是否带有单位
  content:  unitless(1 /2 + 2 );
}
.demo3 {
  content: comparable(2px,1px);  //断两个数是否可以进行加，减以及合并
  content: comparable(2px,1em);
}
//5.三元条件函数if($condition,$if-true,$if-false);
.demo1{width:if(true,8em,20em)}
.demo2{height:if(false,8em,20em)}
//6.Maps的函数
/*
$map: (
    $key1: value1,
    $key2: value2,
    $key3: value3
)
*/
$colors: (
  redColor: #FF2C60,
  greenColor:#168009,
  blueColor:#7BA5FF
);
@if map-has-key($colors, meat) {  //当 $map 中有这个 $key，则函数返回 true，否则返回 false。
  div {
    color: map-get($colors, redColor);   //根据 $key 参数，返回 $key 在 $map 中对应的 value 值。
    color: map-get($colors, yellowColor);   //如果 $key 不存在 $map中，将返回 null 值,并且不会把css编译出来。
  }
} @else {
  div {
    color: green
  }
}
.btn-#{nth(map-keys($colors),1)} {     //函数将会返回 $map 中的所有 key,并通过nth（）获取某值
  color: nth(map-values($colors), 2);   //函数将会返回 $map 中的所有 value,并通过nth（）获取某值
}
$div1: (
  text: #f36,
  link: #f35,
  border: #384
);
$div2: (
  width:300px,
  height:100px,
  z-index:3
);
$newMap: map-merge($div1, $div2);   //map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map。
div {
  @each $x, $y in $newMap {
    #{$x}: #{$y};
  }
}

$newMap: map-remove($div1, link);   // 用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。
div {
  @each $x, $y in $newMap {
    #{$x}: #{$y};
  }
}
//7.颜色函数

.demo1 {
  color: rgb(100, 148, 210);   //根据红、绿、蓝三个值创建一个颜色,输入的是三个0-255之间的数字值
  background-color: rgba(255, 43, 75, 0.8);   //根据红、绿、蓝和透明度值创建一个颜色

}
.demo2 {
  content: red(#f36);   //从一个颜色中获取其红色值
  @if red(#f36) > 50 {   //当颜色的红色值大于50使用白色，否则使用黑色
    color: #fff;
  } @else{
    color: #000;
  }
}
.demo3 {
  color:mix(#f00, #00f);   //把两种颜色按照一定的比例混合在一起
  color: mix(#f00, #00f, 25%)
}
//8.自定义函数
/*@function column-width($col, $total) {
  @return percentage($col/$total);
}
.col-3 {
  width: column-width($col:3, $total:8);
}
.col-5 {
  width: column-width($total:5,$col:8);
}*/

@function column-width($col:3, $total:8) {
  @return percentage($col/$total);
}
.col-3 {
  width: column-width($col:2, $total:4);
}
.col-5 {
  width: column-width();
}
